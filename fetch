#!/bin/bash

DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
RED="\e[0;31m"
GRN="\e[0;32m"
PNK="\e[0;35m"
TXT="\033[0m"
YLW="\e[1;33m"
SRED="\e[0;31m"
SGRN="\e[0;32m"
SYLW="\e[0;33m"
FIN="\e[0m"

prep(){
if [ -e ~/.build ]; then
	sudo rm -fdr ~/.build/*;
	cd ~/.build;
else
	mkdir -p ~/.build;
	cd ~/.build;
fi
}

os_release(){
if [[ `grep -w "focal" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "bullseye" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "bookworm" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "chimaera" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "daedalus" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "jammy" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "kinetic" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "unstable" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
}

echo_bdone(){
echo -e "${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
}

list(){
os_release
version=$(curl --silent -L ${URL}version)
echo $version
}

update(){
sudo mv -f /usr/local/bin/fetch /usr/local/bin/fetch.orig
sudo wget -cq https://raw.githubusercontent.com/pyavitz/scripts/master/fetch -P /usr/local/bin
if [ -e /usr/local/bin/fetch ]; then
	sudo chmod +x /usr/local/bin/fetch;
fi
if [ -e /usr/local/bin/fetch ]; then
	sudo rm -f /usr/local/bin/fetch.orig;
else
	sudo mv -f /usr/local/bin/fetch.orig /usr/local/bin/fetch;
fi
fetch -h
}

initrd_check(){
if [ -f /etc/initramfs/post-update.d/99-initrd ]; then
	:;
else
	sudo mkdir -p /etc/initramfs/post-update.d/;
	sudo wget -cq https://raw.githubusercontent.com/pyavitz/rpi-img-builder/master/files/scripts/99-initrd -P /etc/initramfs/post-update.d/;
	sudo chmod +x /etc/initramfs/post-update.d/99-initrd;
	sudo chown root:root /etc/initramfs/post-update.d/99-initrd;
fi
}

# Linux
rpi-linux(){
initrd_check; os_release; prep;
if [[ `wget -S --spider ${URL}$BOARD-$RELEASE.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo -e "${TXT}Fetching $BOARD-$RELEASE${FIN} ...";
	${DOWNLOAD} ${URL}$BOARD-$RELEASE.sha256;
	${DOWNLOAD} ${URL}$BOARD-$RELEASE.tar.xz;
	echo_bdone;
else
	echo -e "${TXT}Something went wrong? Please report which Distribution and Release you are using.${FIN}";
	exit 0;
fi
echo ""
if [[ `sha256sum --check $BOARD-$RELEASE.sha256 | grep "OK"` ]]; then
	echo -e "${TXT}Extracting archive${FIN} ...";
	pv $BOARD-$RELEASE.tar.xz | tar -xJ $BOARD-$RELEASE;
	rm -f $BOARD-$RELEASE.tar.xz;
	echo "";
	echo -e "${TXT}Starting install${FIN} ...";
	cd $BOARD-$RELEASE;
	sudo dpkg -i *.deb;
	cd ~;
	echo -e "${TXT}Done${FIN}.";
	sudo rm -fdr ~/.build/*;
else
	echo -e "${TXT}Something went wrong? Please report which Distribution and Release you are using${FIN}.";
	exit 0;
fi
}

# Firmware
firmware(){
FWURL="https://github.com/pyavitz/firmware.git"
FWDEST="/lib/firmware/updates/brcm"
RBFALSE="sudo git config pull.rebase false"
echo -e "${TXT}Checking firmware${FIN} ..."
sudo mkdir -p /lib/firmware/updates
if [ -e /etc/firmware ]; then
	:;
else
	sudo ln -sr /lib/firmware /etc/firmware;
fi
if [[ `command -v git` ]]; then
	:;
else
	sudo apt update
	sudo apt install -y git;
fi
if [ -e ${FWDEST}/.git ]; then
	cd ${FWDEST}
	${RBFALSE}
	sudo git pull;
else
	sudo git clone ${FWURL} ${FWDEST};
fi
echo -e "${TXT}Done${FIN}".
cd ~
}

# Userland
rpi_userland(){
echo -e "${TXT}Updating userland${FIN} ..."
mkdir -p ~/.build
cd ~/.build
git clone https://github.com/raspberrypi/userland.git
cd userland
wget -cq https://raw.githubusercontent.com/pyavitz/rpi-img-builder/master/files/debian/patches/userland-remove-hi-pi.patch
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
if [[ $(grep -w "Linux/arm64" "/usr/src/linux-headers-`uname -r`/.config") ]]; then
	echo -e "\e[1;37m== ARM64\e[0m";
	sleep 1s;
	./buildme --aarch64;
fi
if [[ $(grep -w "Linux/arm" "/usr/src/linux-headers-`uname -r`/.config") ]]; then
	echo -e "\e[1;37m== ARM\e[0m";
	sleep 1s;
	./buildme;
fi
cd ~
sudo rm -fdr ~/.build/userland
sudo ldconfig
echo -e "${TXT}Done${FIN}."
}

# Check
if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
	if [[ `command -v wget` ]]; then
		:;
	else
		sudo apt install -y wget;
	fi
	if [[ `command -v aria2c` ]]; then
		:;
	else
		sudo apt install -y aria2;
	fi
	if [[ `command -v pv` ]]; then
		:;
	else
		sudo apt install -y pv;
	fi
else
	echo "";
	read -p "This script requires an internet connection.";
	exit 0;
fi

# Commands
if [ $# -eq 0 ]; then
	echo -e "\e[0;31mMissing options!${FIN}"
	echo "(run $0 -h for help)"
	echo ""
	exit 0
fi

while getopts "12brumUhf" OPTION; do
	case $OPTION in

		1)
			ECHO="5.15"
			;;
		2)
			ECHO="stable"
			;;
		f)
			ECHO="firmware"
			;;
		U)
			ECHO="userland"
			;;
		r)
			ECHO="rev"
			;;
		u)
			ECHO="update"
			;;
		m)
			clear -x
			echo -e "Fetching Releases ..."
			VERSION="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/version2"
			LTS=`curl --silent -L $VERSION | sed -n 1p`
			STB=`curl --silent -L $VERSION | sed -n 2p`
			while [ 1 ]
			do
			CHOICE=$(
			export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
			whiptail --backtitle "Fetch, Linux kernel installer for the Raspberry Pi Image Builder" --title "== Fetch ==" --menu "" --nocancel 0 0 0 \
				"1)" "Linux $LTS       LTS Release" \
				"2)" "Linux $STB       Stable Release" \
				"3)" "Wifi/Bluetooth      Update Firmware" \
				"4)" "Pi Userland         Update Userland" \
				"E)" "Exit .." 3>&2 2>&1 1>&3
			)
			case $CHOICE in
				"1)")
					clear -x
					fetch -1
					echo ""
					read -p "Press enter to continue."
					clear -x
					;;
				"2)")
					clear -x
					fetch -2
					echo ""
					read -p "Press enter to continue."
					clear -x
					;;
				"3)")
					clear -x
					fetch -f
					echo ""
					read -p "Press enter to continue."
					clear -x
					;;
				"4)")
					clear -x
					fetch -U
					echo ""
					read -p "Press enter to continue."
					clear -x
					;;
				"E)")
					clear -x
					exit 0
					;;
				esac
			done
			;;
		h)
			echo -e "${TXT}Fetch, Linux kernel installer for the Raspberry Pi Image Builder${FIN}"
			echo "https://github.com/pyavitz/rpi-img-builder"
			echo "Usage: "
			echo ""
			list
			echo ""
			echo -e "\t-1\tLinux 5.15.y LTS"
			echo -e "\t-2\tLinux Stable Branch"
			echo -e "\t-f\tUpdate Wifi/BT Firmware"
			echo -e "\t-U\tUpdate Raspberry Pi Userland"
			echo ""
			echo -e "\t-u\tUpdate Fetch"
			echo ""
			echo "Should you come across any bugs, either open an issue on GitHub or talk"
			echo "with us directly by joining our channel on Libera; #arm-img-builder"
			exit 0
			;;
	esac
done

if [ $ECHO = "5.15" ]; then
	echo ""
	RELEASE="5.15.y"
	if [[ `grep -w "bcm2708" "/etc/opt/soc.txt"` ]]; then
		BOARD="rpi";
		rpi-linux;
	fi
	
	if [[ `grep -w "bcm2709" "/etc/opt/soc.txt"` ]]; then
		BOARD="rpi2";
		rpi-linux;
	fi

	if [[ `grep -w "bcm2710" "/etc/opt/soc.txt"` ]]; then
		BOARD="rpi3";
		rpi-linux;
	fi

	if [[ `grep -w "bcm2711" "/etc/opt/soc.txt"` ]]; then
		if [[ `grep -w "arm64" "/etc/opt/soc.txt"` ]]; then
			BOARD="rpi4";
			rpi-linux;
		else
			BOARD="rpi4v7";
			rpi-linux;
		fi
	fi
fi

if [ $ECHO = "stable" ]; then
	echo ""
	RELEASE="stable"
	if [[ `grep -w "bcm2708" "/etc/opt/soc.txt"` ]]; then
		BOARD="rpi";
		rpi-linux;
	fi
	
	if [[ `grep -w "bcm2709" "/etc/opt/soc.txt"` ]]; then
		BOARD="rpi2";
		rpi-linux;
	fi

	if [[ `grep -w "bcm2710" "/etc/opt/soc.txt"` ]]; then
		BOARD="rpi3";
		rpi-linux;
	fi

	if [[ `grep -w "bcm2711" "/etc/opt/soc.txt"` ]]; then
		if [[ `grep -w "arm64" "/etc/opt/soc.txt"` ]]; then
			BOARD="rpi4";
			rpi-linux;
		else
			BOARD="rpi4v7";
			rpi-linux;
		fi
	fi
fi

if [ $ECHO = "rev" ]; then
	list;
fi

if [ $ECHO = "update" ]; then
	update;
fi

if [ $ECHO = "firmware" ]; then
	firmware;
fi

if [ $ECHO = "userland" ]; then
	if [ -e /usr/src/linux-headers-`uname -r`/.config ]; then
		rpi_userland;
	else
		echo
		echo -e "${TXT}Something went wrong${FIN}?"
		exit > /dev/null 2>&1;
	fi
fi
